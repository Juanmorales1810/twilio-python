#!/usr/bin/env python3
"""
Test espec√≠fico para el problema de confirmaci√≥n de citas con hora 18:00
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import os
from dotenv import load_dotenv

# Configurar variables de entorno m√≠nimas para testing
os.environ["GEMINI_API_KEY"] = "test_key"
os.environ["MONGODB_URL"] = "mongodb://localhost:27017"

# Solo importar despu√©s de configurar env vars
from services.chatbot_service import ToyotaChatbotService
from utils.validators import validate_time

load_dotenv()

def test_appointment_confirmation_flow():
    """Prueba el flujo completo incluyendo confirmaci√≥n"""
    
    print("=== PRUEBA DE CONFIRMACI√ìN DE CITAS CON 18:00 ===\n")
    
    # Primero verificar que 18:00 sea v√°lido
    is_valid = validate_time("18:00")
    print(f"üïï ¬øEs '18:00' v√°lido? {is_valid}")
    
    if not is_valid:
        print("‚ùå ERROR: 18:00 no es v√°lido seg√∫n la validaci√≥n")
        return
    
    try:
        chatbot = ToyotaChatbotService()
        phone_number = "+1234567890"
        
        # Reset conversation
        chatbot.db.reset_user_conversation(phone_number)
        
        print("\nüì± Simulando conversaci√≥n completa...")
        
        # Conversaci√≥n paso a paso
        steps = [
            ("Quiero agendar una cita", "Iniciar proceso"),
            ("Soy Juan Morales y mi correo es juan@test.com", "Proporcionar datos"),
            ("Me interesa el Corolla", "Seleccionar veh√≠culo"),
            ("El lunes 28", "Proporcionar fecha"),
            ("18:00", "Proporcionar hora - PUNTO CR√çTICO"),
            ("S√≠, confirmo", "Confirmar cita - PUNTO CR√çTICO")
        ]
        
        for i, (message, description) in enumerate(steps, 1):
            print(f"\n--- Paso {i}: {description} ---")
            print(f"üó£Ô∏è  Usuario: {message}")
            
            try:
                response = chatbot.process_message(phone_number, message)
                print(f"ü§ñ Bot: {response}")
                
                # Verificar que no sea mensaje de error
                if "Disculpa, ocurri√≥ un error" in response:
                    print("‚ùå ERROR DETECTADO en la respuesta del bot")
                    
                    # Mostrar datos guardados para debug
                    data = chatbot.get_user_appointment_data(phone_number)
                    print(f"üìä Datos guardados: {data}")
                    break
                elif "‚ùå" in response:
                    print("‚ö†Ô∏è  Mensaje de validaci√≥n detectado")
                else:
                    print("‚úÖ Respuesta normal")
                    
            except Exception as e:
                print(f"‚ùå EXCEPCI√ìN: {str(e)}")
                import traceback
                traceback.print_exc()
                break
        
        # Mostrar estado final
        final_data = chatbot.get_user_appointment_data(phone_number)
        print(f"\nüìä Estado final: {final_data}")
        
        # Verificar si se cre√≥ la cita
        appointments = chatbot.db.get_user_appointments(phone_number)
        print(f"\nüìÖ Citas creadas: {len(appointments)}")
        for appointment in appointments:
            print(f"   ‚Ä¢ {appointment.customer_name} - {appointment.preferred_date} - {appointment.preferred_time}")
            
    except Exception as e:
        print(f"‚ùå ERROR GENERAL: {str(e)}")
        import traceback
        traceback.print_exc()

def test_appointment_model():
    """Prueba la creaci√≥n directa del modelo Appointment"""
    
    print("\n=== PRUEBA DEL MODELO APPOINTMENT ===\n")
    
    try:
        from models.user import Appointment
        from datetime import datetime
        
        # Datos de prueba
        test_data = {
            "phone_number": "+1234567890",
            "customer_name": "Juan Morales",
            "customer_email": "juan@test.com",
            "preferred_date": datetime(2025, 7, 28),
            "preferred_time": "18:00",
            "vehicle_interest": "Corolla"
        }
        
        print("üìù Creando appointment con datos:")
        for key, value in test_data.items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        appointment = Appointment(**test_data)
        print(f"\n‚úÖ Appointment creado exitosamente!")
        print(f"   ‚Ä¢ ID: {appointment.id}")
        print(f"   ‚Ä¢ Nombre: {appointment.customer_name}")
        print(f"   ‚Ä¢ Fecha: {appointment.preferred_date}")
        print(f"   ‚Ä¢ Hora: {appointment.preferred_time}")
        
    except Exception as e:
        print(f"‚ùå ERROR al crear Appointment: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_appointment_model()
    test_appointment_confirmation_flow()
